/**
 * Simple AVI library for Arduino
 * LGPL version 2.1 Copyright 2021 Yoshino Taro
 */

#ifndef __SPRESENSE_SPR_AVI_LIB_CLASS_H__
#define __SPRESENSE_SPR_AVI_LIB_CLASS_H__

#ifdef ARDUINO_ARCH_SPRESENSE /* For Sony Spresense */
#include <Camera.h>
#include <SDHCI.h>
#else  /* For Arduino compatible boards. But I have not tested */
#include <SPI.h>
#include <SD.h>
#endif

#include <stdio.h>

#define AVI_OFFSET (240)

enum AVI_REC_MODE {
  AVI_REC_MOVIE
 ,AVI_REC_TIMELAPSE
 ,AVI_REC_NONE
};

/* Default WIDTH == 1280 (0x500) */
#define WIDTH_1 0x00
#define WIDTH_2 0x05
/* Default HEIGHT == 960 (0x3C0) */
#define HEIGHT_1 0xC0
#define HEIGHT_2 0x03

class AviLibrary {
private:
  bool m_initialized;
  uint32_t m_movi_size;
  uint32_t m_start_time;
  uint8_t  m_width;
  uint8_t  m_height;
  uint32_t m_frames;
  uint32_t m_total_size;
  uint8_t  m_fps;
  uint32_t m_us_per_frame;
  uint32_t m_max_bytes_per_sec;
  float    m_duration_sec;
  AVI_REC_MODE m_rec_mode;
  
  File m_aviFile;
  
  char m_avi_header[AVI_OFFSET+1] = {
    0x52, 0x49, 0x46, 0x46, 0xD8, 0x01, 0x0E, 0x00, 0x41, 0x56, 0x49, 0x20, 0x4C, 0x49, 
    0x53, 0x54, 0xD0, 0x00, 0x00, 0x00, 0x68, 0x64, 0x72, 0x6C, 0x61, 0x76, 0x69, 0x68, 
    0x38, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x80, 0x66, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, WIDTH_1, WIDTH_2, 0x00, 0x00, 
    HEIGHT_1, HEIGHT_2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x49, 0x53, 0x54, 0x84, 0x00, 
    0x00, 0x00, 0x73, 0x74, 0x72, 0x6C, 0x73, 0x74, 0x72, 0x68, 0x30, 0x00, 0x00, 0x00, 
    0x76, 0x69, 0x64, 0x73, 0x4D, 0x4A, 0x50, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x72, 0x66, 0x28, 0x00, 0x00, 0x00, 
    0x28, 0x00, 0x00, 0x00, WIDTH_1, WIDTH_2, 0x00, 0x00, HEIGHT_1, HEIGHT_2, 
    0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x4D, 0x4A, 0x50, 0x47, 0x00, 0x84, 0x03, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x4C, 0x49, 0x53, 0x54, 0x10, 0x00, 0x00, 0x00, 0x6F, 0x64, 0x6D, 0x6C, 
    0x64, 0x6D, 0x6C, 0x68, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x4C, 0x49, 
    0x53, 0x54, 0x00, 0x01, 0x0E, 0x00, 0x6D, 0x6F, 0x76, 0x69, 0x00
  };

private:
  inline void uint32_write_to_aviFile(uint32_t v);
  inline void add_frame(char* img, uint32_t img_size);
  void write_parameters(); 
  
public:
  AviLibrary();
  ~AviLibrary();
  bool begin(File& aviFile, uint16_t width, uint16_t height);
  bool writeHeader();
  void end();
  bool startRecording();
  bool addFrame(char* ImgBuff, uint32_t imgSize);
  bool endRecording();
  bool startTimelapse(uint8_t target_fps);
  bool addTimelapseFrame(char* ImgBuff, uint32_t imgSize);
  bool endTimelapse();
  uint16_t getWidth() { return m_width; }
  uint16_t getHeight() { return m_height; }
  uint32_t getTotalFrame() { return m_frames; }
  uint32_t getFileSize() { return m_total_size; }
  uint32_t getMovieSize() { return m_movi_size; }
  uint16_t getFps() { return m_fps; }
  uint32_t getMaxDataRate() { return m_max_bytes_per_sec; }
  float getDuration() { return m_duration_sec; }
  void setTotalFrame(uint32_t frame) { m_frames = frame; }
  void setMovieSize(uint32_t movi_size) { m_movi_size = movi_size; }
  void setFileSize(uint32_t file_size) { m_total_size = file_size; }
  void setFps(uint8_t fps) { m_fps = fps; }
  AVI_REC_MODE getRecMode();
};


#endif /* __SPRESENSE_SPR_AVI_LIB_CLASS_H__ */
